import nltk
import pandas as pd
fake = pd.read_csv("Fake.csv")
genuine = pd.read_csv("True.csv")
display(fake.info())
display(genuine.info())
display(genuine.head(10))
display(fake.subject.value_counts())
fake['target']=0
genuine['target']=1
display(genuine.head(10))
display(fake.head(10))
data= pd.concat([fake,genuine],axis=0)
date = date.reset_index(drop=True)
data=data.drop(['subject','date','title'],axis=1)
print(data.columns)
from nltk.tokenize import word_tokenize
data['text' ]=data['text'].apply(word_tekenize)
print(data.head(10))
from nltk.stem.snowball import SnowballStemmer
ported = SnowballStemmer("english")
def stem_it(text):
    return [porter.stem(word) for word in text]
data ['text']=data['text'].apply(stem_it)
print(data.head(10))
from nltk.corpus import stopwords
def stop_it(t):
    dt = [word for word in t if len(word)>2]
    return dt
data ['text']=data['text'].apply(stop_it)
print (data.head(10))
data ['text']=data['text'].apply(' '.join)
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(data['text'],data['target'],data['text'],data['target'],test_size = 0.25)
display(X_train.head())
print("\n");
display(y_train.head())
from sklearn.feature_extraction.text import TfidfVectorizer
my_tfidf = TfidVectorizer(max_df=0.7)
tfidf_train = my_tfidf.fit_transform(X_test)
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
model_1 = LogisticRegression(max_iter = 900)
model_1.fit(tfdif_train,y_train)
pred_1 = model_1.predict(tfidf_test)
cr1 = accuracy_scorely(y_test,pred_1)
print(cr1*100)
from sklearn.linear_model import PassiveAggressiveClassifier
model = PassiveAggressiceClassifier(max_iter = 50)
model.fit(tfidf_train,y_train)
y_pred = model.predict(tfidf_test)
accscore = accuracy_score(y_test,y_pred)
print("The accuracy of prediction is ",accscore*100)
